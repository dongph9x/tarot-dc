const { MongoClient } = require('mongodb');
require('dotenv').config();

// C·∫•u h√¨nh MongoDB t·ª´ file .env
const MONGODB_URI = process.env.MONGODB_URI;
const DATABASE_NAME = process.env.MONGODB_DB || 'tarot_discord_bot';

// Collections
const COLLECTIONS = {
    MESSAGE_LOGS: 'message_logs',
    IMPORTANT_LOGS: 'important_logs'
};

async function clearAllLogs() {
    let client;
    
    try {
        // Ki·ªÉm tra c·∫•u h√¨nh
        if (!MONGODB_URI) {
            console.error('‚ùå MONGODB_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env');
            return;
        }
        
        console.log('üîó K·∫øt n·ªëi MongoDB...');
        console.log(`üìä Database: ${DATABASE_NAME}`);
        client = new MongoClient(MONGODB_URI);
        await client.connect();
        
        const db = client.db(DATABASE_NAME);
        
        console.log('üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a logs...');
        
        // X√≥a t·∫•t c·∫£ record trong message_logs
        console.log('üìù X√≥a message_logs...');
        const messageLogsResult = await db.collection(COLLECTIONS.MESSAGE_LOGS).deleteMany({});
        console.log(`‚úÖ ƒê√£ x√≥a ${messageLogsResult.deletedCount} record trong message_logs`);
        
        // X√≥a t·∫•t c·∫£ record trong important_logs
        console.log('‚ö†Ô∏è X√≥a important_logs...');
        const importantLogsResult = await db.collection(COLLECTIONS.IMPORTANT_LOGS).deleteMany({});
        console.log(`‚úÖ ƒê√£ x√≥a ${importantLogsResult.deletedCount} record trong important_logs`);
        
        console.log('üéâ Ho√†n th√†nh x√≥a t·∫•t c·∫£ logs!');
        
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a logs:', error);
    } finally {
        if (client) {
            await client.close();
            console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
        }
    }
}

// Ch·∫°y script
if (require.main === module) {
    clearAllLogs();
}

module.exports = { clearAllLogs };
