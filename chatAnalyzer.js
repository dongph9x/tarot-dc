const { EmbedBuilder } = require('discord.js');
const { getChatGPTReading } = require('./chatgptReader');

// C·∫•u h√¨nh Chat Analyzer
const CHAT_ANALYZER_CONFIG = {
    TARGET_CHANNEL_ID: process.env.TARGET_CHANNEL_ID || null,
    ANALYSIS_INTERVAL: 2 * 60 * 1000, // 2 ph√∫t
    BATCH_SIZE: 10, // S·ªë tin nh·∫Øn x·ª≠ l√Ω m·ªói l·∫ßn
    ENABLED: process.env.CHAT_ANALYZER_ENABLED === 'true',
    CUSTOM_PROMPT: process.env.CHAT_ANALYZER_PROMPT || null,
    NOTIFICATION_ENABLED: process.env.NOTIFICATION_ENABLED === 'true',
    NOTIFICATION_USER_IDS: process.env.NOTIFICATION_USER_IDS ? 
        process.env.NOTIFICATION_USER_IDS.split(',').map(id => id.trim()) : []
};

// MongoDB Collections
const COLLECTIONS = {
    MESSAGE_LOGS: 'message_logs',
    IMPORTANT_LOGS: 'important_logs'
};

// Tr·∫°ng th√°i x·ª≠ l√Ω
const PROCESSING_STATUS = {
    PENDING: 'pending',
    DONE: 'done',
    ERROR: 'error'
};

// M·ª©c ƒë·ªô quan tr·ªçng
const IMPORTANCE_LEVELS = {
    LOW: 'low',
    MEDIUM: 'medium',
    HIGH: 'high'
};

/**
 * L∆∞u tin nh·∫Øn v√†o database
 * @param {Object} db - Database instance
 * @param {Object} message - Discord message object
 */
async function saveMessageToDatabase(db, message) {
    if (!CHAT_ANALYZER_CONFIG.ENABLED || !CHAT_ANALYZER_CONFIG.TARGET_CHANNEL_ID) {
        return;
    }

    // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ channel ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    if (message.channelId !== CHAT_ANALYZER_CONFIG.TARGET_CHANNEL_ID) {
        return;
    }

    // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn text, b·ªè qua bot messages
    if (message.author.bot || !message.content || message.content.trim() === '') {
        return;
    }

    try {
        const collection = db.collection(COLLECTIONS.MESSAGE_LOGS);
        
        const messageData = {
            messageId: message.id,
            authorId: message.author.id,
            authorName: message.author.username,
            content: message.content,
            channelId: message.channelId,
            createdAt: message.createdAt,
            status: PROCESSING_STATUS.PENDING,
            processedAt: null
        };

        // Upsert ƒë·ªÉ tr√°nh duplicate
        await collection.updateOne(
            { messageId: message.id },
            { $set: messageData },
            { upsert: true }
        );

        console.log(`üìù ƒê√£ l∆∞u tin nh·∫Øn: ${message.author.username} - ${message.content.substring(0, 50)}...`);
    } catch (error) {
        console.error('‚ùå L·ªói l∆∞u tin nh·∫Øn:', error);
    }
}

/**
 * L·∫•y tin nh·∫Øn ch∆∞a x·ª≠ l√Ω t·ª´ database
 * @param {Object} db - Database instance
 * @returns {Array} Danh s√°ch tin nh·∫Øn
 */
async function getPendingMessages(db) {
    try {
        const collection = db.collection(COLLECTIONS.MESSAGE_LOGS);
        
        const pendingMessages = await collection
            .find({ status: PROCESSING_STATUS.PENDING })
            .sort({ createdAt: 1 })
            .limit(CHAT_ANALYZER_CONFIG.BATCH_SIZE)
            .toArray();

        return pendingMessages;
    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y tin nh·∫Øn pending:', error);
        return [];
    }
}

/**
 * T·∫°o prompt cho GPT t·ª´ danh s√°ch tin nh·∫Øn
 * @param {Array} messages - Danh s√°ch tin nh·∫Øn
 * @returns {string} Prompt
 */
function createAnalysisPrompt(messages) {
    if (messages.length === 0) {
        return '';
    }

    const messageTexts = messages.map(msg => {
        const timestamp = new Date(msg.createdAt).toLocaleTimeString('vi-VN');
        return `[${timestamp}] ${msg.authorName}: ${msg.content}`;
    }).join('\n');

    // S·ª≠ d·ª•ng prompt t√πy ch·ªânh n·∫øu c√≥,Âê¶Âàô s·ª≠ d·ª•ng prompt m·∫∑c ƒë·ªãnh
    if (CHAT_ANALYZER_CONFIG.CUSTOM_PROMPT) {
        return `${CHAT_ANALYZER_CONFIG.CUSTOM_PROMPT}

${messageTexts}

**Tr·∫£ l·ªùi theo format ch√≠nh x√°c:**
IMPORTANCE: [LOW/MEDIUM/HIGH]
SUMMARY: [T√≥m t·∫Øt ng·∫Øn g·ªçn n·ªôi dung quan tr·ªçng, ho·∫∑c "Kh√¥ng c√≥ g√¨ ƒë√°ng ch√∫ √Ω"]`;
    }

    // Prompt m·∫∑c ƒë·ªãnh
    return `Ph√¢n t√≠ch ƒëo·∫°n chat sau v√† ƒë√°nh gi√° m·ª©c ƒë·ªô quan tr·ªçng:

${messageTexts}

**H∆Ø·ªöNG D·∫™N PH√ÇN T√çCH CHI TI·∫æT:**

**HIGH (Quan tr·ªçng cao) - PH·∫¢I ƒê√ÅNH GI√Å HIGH KHI C√ì:**
- Nh·∫Øc ƒë·∫øn t√™n ng∆∞·ªùi c·ª• th·ªÉ: "A ƒê√¥ng", "ƒê√¥ng", "Nhi", "NoTwo", "anh ƒê√¥ng", "ch·ªã Nhi"
- Nh·∫Øc ƒë·∫øn vai tr√≤: "Mod", "Admin", "moderator", "administrator"
- T·ª´ ng·ªØ ch·ª≠i b·ªõi, x√∫c ph·∫°m: "ƒë√π", "wtf", "dm", "m·∫π", "m·ªãa", "ch·ª≠i"
- T·ª´ ng·ªØ ch√¢m bi·∫øm, x√∫c ph·∫°m: "b√©o nh∆∞ heo", "b√©o nh∆∞ con l·ª£n", "ƒÉn nh∆∞ l·ª£n", "ngu nh∆∞ b√≤"
- T·ª´ ng·ªØ ph√¢n bi·ªát: "gay", "less", "l·∫©u g√† b√¨nh thu·∫≠n", "lgbt", "parky", "b·∫Øc k√¨", "nam k√¨"
- T·ª´ ng·ªØ c·∫£m x√∫c m·∫°nh: "y√™u", "gh√©t", "th√≠ch", "th∆∞∆°ng", "l·ªói", "t·ªôi l·ªói"
- Th·∫£o lu·∫≠n d·ª± √°n, c√¥ng vi·ªác quan tr·ªçng
- Quy·∫øt ƒë·ªãnh, th·ªëng nh·∫•t, k·∫ø ho·∫°ch c·ª• th·ªÉ
- V·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt ngay, kh·ªßng ho·∫£ng

**MEDIUM (Quan tr·ªçng trung b√¨nh):**
- H·ªèi ƒë√°p, t∆∞ v·∫•n, g√≥p √Ω v·ªÅ c√¥ng vi·ªác, cu·ªôc s·ªëng
- T·ª´ li√™n quan tr·∫°ng th√°i: "Block", "ban", "kick"
- Th·∫£o lu·∫≠n k·ªπ thu·∫≠t, chia s·∫ª ki·∫øn th·ª©c

**LOW (Kh√¥ng quan tr·ªçng):**
- Ch√†o h·ªèi th√¥ng th∆∞·ªùng: "Ch√†o m·ªçi ng∆∞·ªùi", "Hello", "Hi"
- Chuy·ªán phi·∫øm: "ƒêi l√†m", "ƒÇn c∆°m", "Ngh·ªâ ng∆°i"
- Emoji, reaction: "üëç", "‚ù§Ô∏è", "üòä"
- Chia s·∫ª meme, video gi·∫£i tr√≠

**QUY T·∫ÆC QUAN TR·ªåNG:**
1. N·∫øu tin nh·∫Øn ch·ª©a B·∫§T K·ª≤ t·ª´ n√†o trong danh s√°ch HIGH ‚Üí PH·∫¢I ƒë√°nh gi√° HIGH
2. Kh√¥ng ƒë∆∞·ª£c b·ªè qua c√°c t·ª´ kh√≥a quan tr·ªçng
3. Ph·∫£i ph√¢n t√≠ch t·ª´ng t·ª´ m·ªôt c√°ch c·∫©n th·∫≠n

**V√ç D·ª§ PH√ÇN T√çCH CH√çNH X√ÅC:**
- "A ƒê√¥ng ∆°i" ‚Üí HIGH (c√≥ t√™n "ƒê√¥ng")
- "Mod ∆°i" ‚Üí HIGH (c√≥ vai tr√≤ "Mod")
- "Admin ∆°i" ‚Üí HIGH (c√≥ vai tr√≤ "Admin")
- "Em √† m√†y b√©o nh∆∞ con l·ª£n" ‚Üí HIGH (c√≥ t·ª´ ch√¢m bi·∫øm "b√©o nh∆∞ con l·ª£n")
- "Ch√†o m·ªçi ng∆∞·ªùi" ‚Üí LOW
- "Hello" ‚Üí LOW
- "üëç" ‚Üí LOW

**Tr·∫£ l·ªùi theo format ch√≠nh x√°c:**
IMPORTANCE: [LOW/MEDIUM/HIGH]
SUMMARY: [T√≥m t·∫Øt ng·∫Øn g·ªçn n·ªôi dung quan tr·ªçng, ho·∫∑c "Kh√¥ng c√≥ g√¨ ƒë√°ng ch√∫ √Ω"]`;
}

/**
 * Ph√¢n t√≠ch tin nh·∫Øn b·∫±ng GPT
 * @param {Array} messages - Danh s√°ch tin nh·∫Øn
 * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch
 */
async function analyzeMessagesWithGPT(messages) {
    try {
        const prompt = createAnalysisPrompt(messages);
        if (!prompt) {
            return { importance: IMPORTANCE_LEVELS.LOW, summary: 'Kh√¥ng c√≥ tin nh·∫Øn ƒë·ªÉ ph√¢n t√≠ch' };
        }

        const response = await getChatGPTReading('custom', [], prompt);
        
        // Parse response
        const lines = response.split('\n');
        let importance = IMPORTANCE_LEVELS.LOW;
        let summary = 'Kh√¥ng c√≥ g√¨ ƒë√°ng ch√∫ √Ω';

        for (const line of lines) {
            if (line.startsWith('IMPORTANCE:')) {
                const level = line.replace('IMPORTANCE:', '').trim().toLowerCase();
                if (Object.values(IMPORTANCE_LEVELS).includes(level)) {
                    importance = level;
                }
            } else if (line.startsWith('SUMMARY:')) {
                summary = line.replace('SUMMARY:', '').trim();
            }
        }

        return { importance, summary, rawResponse: response };
    } catch (error) {
        console.error('‚ùå L·ªói ph√¢n t√≠ch GPT:', error);
        return { importance: IMPORTANCE_LEVELS.LOW, summary: 'L·ªói ph√¢n t√≠ch' };
    }
}

/**
 * L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch quan tr·ªçng
 * @param {Object} db - Database instance
 * @param {Object} analysisResult - K·∫øt qu·∫£ ph√¢n t√≠ch
 * @param {Array} messages - Danh s√°ch tin nh·∫Øn
 * @param {Object} client - Discord client (optional)
 */
async function saveImportantAnalysis(db, analysisResult, messages, client = null) {
    try {
        const collection = db.collection(COLLECTIONS.IMPORTANT_LOGS);
        
        const importantLog = {
            summary: analysisResult.summary,
            messageIds: messages.map(msg => msg.messageId),
            gptResponse: analysisResult.rawResponse || '',
            importanceLevel: analysisResult.importance,
            createdAt: new Date(),
            messageCount: messages.length,
            authors: [...new Set(messages.map(msg => msg.authorName))]
        };

        await collection.insertOne(importantLog);
        
        console.log(`üîç ƒê√£ l∆∞u ph√¢n t√≠ch quan tr·ªçng: ${analysisResult.importance.toUpperCase()} - ${analysisResult.summary.substring(0, 50)}...`);

        // G·ª≠i th√¥ng b√°o n·∫øu c√≥ ƒë√°nh gi√° HIGH v√† c√≥ client
        if (analysisResult.importance === IMPORTANCE_LEVELS.HIGH && client) {
            await sendHighImportanceNotification(client, importantLog, db);
        }
    } catch (error) {
        console.error('‚ùå L·ªói l∆∞u ph√¢n t√≠ch quan tr·ªçng:', error);
    }
}

/**
 * C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
 * @param {Object} db - Database instance
 * @param {Array} messageIds - Danh s√°ch message IDs
 * @param {string} status - Tr·∫°ng th√°i m·ªõi
 */
async function updateMessageStatus(db, messageIds, status) {
    try {
        const collection = db.collection(COLLECTIONS.MESSAGE_LOGS);
        
        await collection.updateMany(
            { messageId: { $in: messageIds } },
            { 
                $set: { 
                    status: status,
                    processedAt: new Date()
                }
            }
        );

        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ${messageIds.length} tin nh·∫Øn: ${status}`);
    } catch (error) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn:', error);
    }
}

/**
 * X·ª≠ l√Ω ph√¢n t√≠ch ƒë·ªãnh k·ª≥
 * @param {Object} db - Database instance
 * @param {Object} client - Discord client (optional)
 */
async function processChatAnalysis(db, client = null) {
    if (!CHAT_ANALYZER_CONFIG.ENABLED) {
        return;
    }

    try {
        console.log('üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch chat...');
        
        // L·∫•y tin nh·∫Øn ch∆∞a x·ª≠ l√Ω
        const pendingMessages = await getPendingMessages(db);
        
        if (pendingMessages.length === 0) {
            console.log('üì≠ Kh√¥ng c√≥ tin nh·∫Øn n√†o c·∫ßn ph√¢n t√≠ch');
            return;
        }

        console.log(`üìã T√¨m th·∫•y ${pendingMessages.length} tin nh·∫Øn c·∫ßn ph√¢n t√≠ch`);

        // Ph√¢n t√≠ch b·∫±ng GPT
        const analysisResult = await analyzeMessagesWithGPT(pendingMessages);
        
        console.log(`üîç K·∫øt qu·∫£ ph√¢n t√≠ch: ${analysisResult.importance.toUpperCase()} - ${analysisResult.summary}`);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn
        await updateMessageStatus(db, pendingMessages.map(msg => msg.messageId), PROCESSING_STATUS.DONE);

        // N·∫øu c√≥ n·ªôi dung quan tr·ªçng, l∆∞u v√†o important_logs
        if (analysisResult.importance !== IMPORTANCE_LEVELS.LOW || 
            !analysisResult.summary.includes('Kh√¥ng c√≥ g√¨ ƒë√°ng ch√∫ √Ω')) {
            console.log(`üíæ L∆∞u v√†o important_logs: ${analysisResult.importance.toUpperCase()}`);
            await saveImportantAnalysis(db, analysisResult, pendingMessages, client);
        } else {
            console.log(`üìù Kh√¥ng l∆∞u v√†o important_logs: ${analysisResult.importance.toUpperCase()} - ${analysisResult.summary}`);
        }

        console.log('‚úÖ Ho√†n th√†nh ph√¢n t√≠ch chat');
    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω ph√¢n t√≠ch chat:', error);
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªói n·∫øu c√≥
        if (pendingMessages && pendingMessages.length > 0) {
            await updateMessageStatus(db, pendingMessages.map(msg => msg.messageId), PROCESSING_STATUS.ERROR);
        }
    }
}

/**
 * T·∫°o embed th√¥ng b√°o ph√¢n t√≠ch quan tr·ªçng
 * @param {Object} importantLog - Log quan tr·ªçng
 * @returns {EmbedBuilder}
 */
function createImportantAnalysisEmbed(importantLog) {
    const colors = {
        [IMPORTANCE_LEVELS.LOW]: '#00FF00',
        [IMPORTANCE_LEVELS.MEDIUM]: '#FFA500',
        [IMPORTANCE_LEVELS.HIGH]: '#FF0000'
    };

    const embed = new EmbedBuilder()
        .setTitle(`üîç Ph√¢n T√≠ch Chat Quan Tr·ªçng - ${importantLog.importanceLevel.toUpperCase()}`)
        .setDescription(importantLog.summary)
        .setColor(colors[importantLog.importanceLevel] || '#00FF00')
        .addFields(
            {
                name: 'üìä Th√¥ng Tin',
                value: `**S·ªë tin nh·∫Øn:** ${importantLog.messageCount}\n**T√°c gi·∫£:** ${importantLog.authors.join(', ')}`,
                inline: true
            },
            {
                name: '‚è∞ Th·ªùi Gian',
                value: new Date(importantLog.createdAt).toLocaleString('vi-VN'),
                inline: true
            }
        )
        .setTimestamp()
        .setFooter({ text: 'Chat Analyzer ‚Ä¢ T·ª± ƒë·ªông ph√¢n t√≠ch' });

    return embed;
}

/**
 * Kh·ªüi t·∫°o scheduler cho ph√¢n t√≠ch ƒë·ªãnh k·ª≥
 * @param {Object} db - Database instance
 * @param {Object} client - Discord client
 */
function startChatAnalysisScheduler(db, client) {
    if (!CHAT_ANALYZER_CONFIG.ENABLED) {
        console.log('‚ö†Ô∏è Chat Analyzer ƒë√£ b·ªã t·∫Øt');
        return;
    }

    if (!CHAT_ANALYZER_CONFIG.TARGET_CHANNEL_ID) {
        console.log('‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh TARGET_CHANNEL_ID cho Chat Analyzer');
        return;
    }

    console.log('üöÄ Kh·ªüi ƒë·ªông Chat Analyzer Scheduler...');
    console.log(`üì∫ Theo d√µi channel: ${CHAT_ANALYZER_CONFIG.TARGET_CHANNEL_ID}`);
    console.log(`‚è∞ Chu k·ª≥ ph√¢n t√≠ch: ${CHAT_ANALYZER_CONFIG.ANALYSIS_INTERVAL / 1000} gi√¢y`);

    // Ch·∫°y ph√¢n t√≠ch ngay l·∫≠p t·ª©c
    processChatAnalysis(db, client);

    // L·∫≠p l·ªãch ph√¢n t√≠ch ƒë·ªãnh k·ª≥
    setInterval(() => {
        processChatAnalysis(db, client);
    }, CHAT_ANALYZER_CONFIG.ANALYSIS_INTERVAL);
}

/**
 * G·ª≠i th√¥ng b√°o ƒë·∫øn user khi c√≥ ƒë√°nh gi√° HIGH
 * @param {Object} client - Discord client
 * @param {Object} importantLog - Log quan tr·ªçng
 * @param {Object} db - Database instance
 */
async function sendHighImportanceNotification(client, importantLog, db) {
    if (!CHAT_ANALYZER_CONFIG.NOTIFICATION_ENABLED || 
        CHAT_ANALYZER_CONFIG.NOTIFICATION_USER_IDS.length === 0) {
        return;
    }

    try {
        // L·∫•y chi ti·∫øt tin nh·∫Øn t·ª´ database
        const messageCollection = db.collection(COLLECTIONS.MESSAGE_LOGS);
        const messages = await messageCollection
            .find({ messageId: { $in: importantLog.messageIds } })
            .sort({ createdAt: 1 })
            .toArray();

        // T·∫°o embed chi ti·∫øt v·ªõi n·ªôi dung tin nh·∫Øn
        const embed = new EmbedBuilder()
            .setTitle(`üö® TH√îNG B√ÅO QUAN TR·ªåNG - ${importantLog.importanceLevel.toUpperCase()}`)
            .setDescription(importantLog.summary)
            .setColor('#FF0000') // M√†u ƒë·ªè cho th√¥ng b√°o quan tr·ªçng
            .addFields(
                {
                    name: 'üìä Th√¥ng Tin',
                    value: `**S·ªë tin nh·∫Øn:** ${importantLog.messageCount}\n**T√°c gi·∫£:** ${importantLog.authors.join(', ')}`,
                    inline: true
                },
                {
                    name: '‚è∞ Th·ªùi Gian',
                    value: new Date(importantLog.createdAt).toLocaleString('vi-VN'),
                    inline: true
                }
            )
            .setTimestamp()
            .setFooter({ text: 'Chat Analyzer ‚Ä¢ T·ª± ƒë·ªông ph√¢n t√≠ch' });

        // Th√™m n·ªôi dung tin nh·∫Øn chi ti·∫øt
        if (messages.length > 0) {
            const messageDetails = messages.map((msg, index) => {
                const timestamp = new Date(msg.createdAt).toLocaleTimeString('vi-VN');
                return `**${index + 1}. [${timestamp}] ${msg.authorName}:**\n${msg.content}`;
            }).join('\n\n');

            // Chia nh·ªè n·∫øu n·ªôi dung qu√° d√†i
            if (messageDetails.length > 1024) {
                const chunks = [];
                let currentChunk = '';
                const lines = messageDetails.split('\n');
                
                for (const line of lines) {
                    if ((currentChunk + line).length > 1024) {
                        if (currentChunk) chunks.push(currentChunk);
                        currentChunk = line;
                    } else {
                        currentChunk += (currentChunk ? '\n' : '') + line;
                    }
                }
                if (currentChunk) chunks.push(currentChunk);

                chunks.forEach((chunk, index) => {
                    embed.addFields({
                        name: index === 0 ? 'üí¨ N·ªôi Dung Tin Nh·∫Øn' : `üí¨ N·ªôi Dung (Ti·∫øp)`,
                        value: chunk,
                        inline: false
                    });
                });
            } else {
                embed.addFields({
                    name: 'üí¨ N·ªôi Dung Tin Nh·∫Øn',
                    value: messageDetails,
                    inline: false
                });
            }
        }

        for (const userId of CHAT_ANALYZER_CONFIG.NOTIFICATION_USER_IDS) {
            try {
                const user = await client.users.fetch(userId);
                await user.send({ embeds: [embed] });
                console.log(`üì§ ƒê√£ g·ª≠i th√¥ng b√°o chi ti·∫øt ƒë·∫øn user: ${user.username} (${userId})`);
            } catch (error) {
                console.error(`‚ùå Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn user ${userId}:`, error.message);
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói g·ª≠i th√¥ng b√°o:', error);
    }
}

/**
 * L·∫•y th·ªëng k√™ chat analyzer
 * @param {Object} db - Database instance
 * @returns {Promise<Object>} Th·ªëng k√™
 */
async function getChatAnalyzerStats(db) {
    try {
        const messageCollection = db.collection(COLLECTIONS.MESSAGE_LOGS);
        const importantCollection = db.collection(COLLECTIONS.IMPORTANT_LOGS);

        const [
            totalMessages,
            pendingMessages,
            importantLogs,
            todayMessages
        ] = await Promise.all([
            messageCollection.countDocuments(),
            messageCollection.countDocuments({ status: PROCESSING_STATUS.PENDING }),
            importantCollection.countDocuments(),
            messageCollection.countDocuments({
                createdAt: {
                    $gte: new Date(new Date().setHours(0, 0, 0, 0))
                }
            })
        ]);

        return {
            totalMessages,
            pendingMessages,
            importantLogs,
            todayMessages,
            enabled: CHAT_ANALYZER_CONFIG.ENABLED,
            targetChannel: CHAT_ANALYZER_CONFIG.TARGET_CHANNEL_ID
        };
    } catch (error) {
        console.error('‚ùå L·ªói l·∫•y th·ªëng k√™ chat analyzer:', error);
        return {
            totalMessages: 0,
            pendingMessages: 0,
            importantLogs: 0,
            todayMessages: 0,
            enabled: false,
            targetChannel: null
        };
    }
}

module.exports = {
    saveMessageToDatabase,
    startChatAnalysisScheduler,
    getChatAnalyzerStats,
    createImportantAnalysisEmbed,
    sendHighImportanceNotification,
    CHAT_ANALYZER_CONFIG,
    COLLECTIONS,
    PROCESSING_STATUS,
    IMPORTANCE_LEVELS
}; 