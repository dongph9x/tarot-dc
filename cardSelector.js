const { ActionRowBuilder, StringSelectMenuBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const { data, cardKeys } = require('./cardUtils');

/**
 * T·∫°o embed hi·ªÉn th·ªã danh s√°ch b√†i theo lo·∫°i
 * @param {string} type - 'major', 'minor', ho·∫∑c 'all'
 * @returns {EmbedBuilder} Embed hi·ªÉn th·ªã danh s√°ch
 */
function createCardListEmbed(type = 'all') {
    const embed = new EmbedBuilder()
        .setColor('#800080')
        .setTimestamp()
        .setFooter({ text: 'Tarot Bot ‚Ä¢ Ch·ªçn b√†i ƒë·ªÉ lu·∫≠n gi·∫£i' });

    if (type === 'major') {
        embed.setTitle('üåü Major Arcana (22 l√° b√†i)');
        embed.setDescription('Nh·ªØng l√° b√†i ch√≠nh th·ªÉ hi·ªán c√°c b√†i h·ªçc l·ªõn trong cu·ªôc s·ªëng');
        
        const majorCards = cardKeys
            .map((key, index) => ({ key, index, ...data[key] }))
            .filter(card => card.type === 'major')
            .map(card => `**${card.index}.** ${card.name}`)
            .join('\n');
            
        embed.addFields({ name: 'Danh s√°ch b√†i:', value: majorCards, inline: false });
        
    } else if (type === 'minor') {
        embed.setTitle('üÉè Minor Arcana (56 l√° b√†i)');
        embed.setDescription('C√°c l√° b√†i th·ªÉ hi·ªán t√¨nh hu·ªëng h√†ng ng√†y');
        
        // Chia theo b·ªô
        const suits = {
            'Ti·ªÅn (Pentacles)': { start: 22, end: 35 },
            'G·∫≠y (Wands)': { start: 36, end: 49 },
            'C·ªëc (Cups)': { start: 50, end: 63 },
            'Ki·∫øm (Swords)': { start: 64, end: 77 }
        };
        
        Object.entries(suits).forEach(([suitName, range]) => {
            const suitCards = cardKeys
                .slice(range.start, range.end + 1)
                .map((key, i) => `**${range.start + i}.** ${data[key].name}`)
                .join('\n');
            embed.addFields({ name: suitName, value: suitCards, inline: true });
        });
        
    } else {
        embed.setTitle('üîÆ T·∫•t C·∫£ C√°c L√° B√†i Tarot (78 l√°)');
        embed.setDescription('Ch·ªçn lo·∫°i b√†i b·∫°n mu·ªën xem:');
        embed.addFields(
            { name: 'üåü Major Arcana', value: '22 l√° b√†i ch√≠nh', inline: true },
            { name: 'üÉè Minor Arcana', value: '56 l√° b√†i ph·ª•', inline: true },
            { name: 'üìã H∆∞·ªõng d·∫´n', value: 'S·ª≠ d·ª•ng menu b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn', inline: false }
        );
    }

    return embed;
}

/**
 * T·∫°o select menu cho vi·ªác ch·ªçn lo·∫°i b√†i
 * @returns {ActionRowBuilder} Row ch·ª©a select menu
 */
function createCardTypeSelector() {
    const select = new StringSelectMenuBuilder()
        .setCustomId('card_type_select')
        .setPlaceholder('Ch·ªçn lo·∫°i b√†i ƒë·ªÉ xem...')
        .addOptions([
            {
                label: 'Major Arcana',
                description: '22 l√° b√†i ch√≠nh - C√°c b√†i h·ªçc l·ªõn',
                value: 'major',
                emoji: 'üåü'
            },
            {
                label: 'Minor Arcana',  
                description: '56 l√° b√†i ph·ª• - T√¨nh hu·ªëng h√†ng ng√†y',
                value: 'minor',
                emoji: 'üÉè'
            },
            {
                label: 'T·∫•t c·∫£',
                description: 'Xem t·ªïng quan 78 l√° b√†i',
                value: 'all',
                emoji: 'üîÆ'
            }
        ]);

    return new ActionRowBuilder().addComponents(select);
}

/**
 * T·∫°o select menu cho vi·ªác ch·ªçn b√†i c·ª• th·ªÉ
 * @param {string} type - 'major' ho·∫∑c 'minor'
 * @param {number} page - Trang hi·ªán t·∫°i (m·ªói trang 25 b√†i)
 * @returns {ActionRowBuilder} Row ch·ª©a select menu
 */
function createCardSelector(type, page = 0) {
    const cardsPerPage = 25;
    let filteredCards;
    
    if (type === 'major') {
        filteredCards = cardKeys
            .map((key, index) => ({ key, index, ...data[key] }))
            .filter(card => card.type === 'major');
    } else if (type === 'minor') {
        filteredCards = cardKeys
            .map((key, index) => ({ key, index, ...data[key] }))
            .filter(card => card.type === 'minor');
    } else {
        filteredCards = cardKeys
            .map((key, index) => ({ key, index, ...data[key] }));
    }
    
    const startIndex = page * cardsPerPage;
    const endIndex = Math.min(startIndex + cardsPerPage, filteredCards.length);
    const pageCards = filteredCards.slice(startIndex, endIndex);
    
    const select = new StringSelectMenuBuilder()
        .setCustomId(`card_select_${type}_${page}`)
        .setPlaceholder(`Ch·ªçn l√° b√†i... (${startIndex + 1}-${endIndex}/${filteredCards.length})`)
        .addOptions(
            pageCards.map(card => ({
                label: `${card.index}. ${card.name}`,
                description: card.meaning.upright.substring(0, 100),
                value: card.index.toString(),
                emoji: card.type === 'major' ? 'üåü' : 'üÉè'
            }))
        );

    return new ActionRowBuilder().addComponents(select);
}

/**
 * T·∫°o buttons ƒëi·ªÅu h∆∞·ªõng cho pagination
 * @param {string} type - Lo·∫°i b√†i
 * @param {number} currentPage - Trang hi·ªán t·∫°i
 * @param {number} totalPages - T·ªïng s·ªë trang
 * @returns {ActionRowBuilder} Row ch·ª©a buttons
 */
function createPaginationButtons(type, currentPage, totalPages) {
    const buttons = [];
    
    if (currentPage > 0) {
        buttons.push(
            new ButtonBuilder()
                .setCustomId(`card_page_${type}_${currentPage - 1}`)
                .setLabel('‚óÄ Trang tr∆∞·ªõc')
                .setStyle(ButtonStyle.Secondary)
        );
    }
    
    buttons.push(
        new ButtonBuilder()
            .setCustomId('page_info')
            .setLabel(`Trang ${currentPage + 1}/${totalPages}`)
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(true)
    );
    
    if (currentPage < totalPages - 1) {
        buttons.push(
            new ButtonBuilder()
                .setCustomId(`card_page_${type}_${currentPage + 1}`)
                .setLabel('Trang sau ‚ñ∂')
                .setStyle(ButtonStyle.Secondary)
        );
    }
    
    return new ActionRowBuilder().addComponents(buttons);
}

/**
 * T·∫°o buttons cho c√°c h√†nh ƒë·ªông v·ªõi b√†i ƒë√£ ch·ªçn
 * @param {Array} selectedCards - M·∫£ng c√°c b√†i ƒë√£ ch·ªçn
 * @returns {ActionRowBuilder} Row ch·ª©a buttons
 */
function createActionButtons(selectedCards) {
    const buttons = [
        new ButtonBuilder()
            .setCustomId('reading_chatgpt')
            .setLabel(`ü§ñ Lu·∫≠n b√†i v·ªõi ChatGPT`)
            .setStyle(ButtonStyle.Primary)
            .setDisabled(selectedCards.length === 0),
        
        new ButtonBuilder()
            .setCustomId('reading_quick')
            .setLabel('‚ö° ƒê·ªçc nhanh')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(selectedCards.length === 0),
            
        new ButtonBuilder()
            .setCustomId('clear_selection')
            .setLabel('üóëÔ∏è X√≥a l·ª±a ch·ªçn')
            .setStyle(ButtonStyle.Danger)
            .setDisabled(selectedCards.length === 0),
            
        new ButtonBuilder()
            .setCustomId('add_more_cards')
            .setLabel('‚ûï Th√™m b√†i')
            .setStyle(ButtonStyle.Success)
            .setDisabled(selectedCards.length >= 10)
    ];
    
    return new ActionRowBuilder().addComponents(buttons);
}

/**
 * T·∫°o embed hi·ªÉn th·ªã c√°c b√†i ƒë√£ ch·ªçn
 * @param {Array} selectedCards - M·∫£ng c√°c b√†i ƒë√£ ch·ªçn
 * @returns {EmbedBuilder} Embed hi·ªÉn th·ªã
 */
function createSelectedCardsEmbed(selectedCards) {
    const embed = new EmbedBuilder()
        .setTitle('üéØ C√°c L√° B√†i ƒê√£ Ch·ªçn')
        .setColor('#FFD700')
        .setTimestamp();
        
    if (selectedCards.length === 0) {
        embed.setDescription('Ch∆∞a c√≥ l√° b√†i n√†o ƒë∆∞·ª£c ch·ªçn.\nS·ª≠ d·ª•ng menu b√™n d∆∞·ªõi ƒë·ªÉ ch·ªçn b√†i.');
        return embed;
    }
    
    embed.setDescription(`ƒê√£ ch·ªçn ${selectedCards.length}/10 l√° b√†i:`);
    
    selectedCards.forEach((card, index) => {
        embed.addFields({
            name: `${index + 1}. ${card.name}`,
            value: `**Lo·∫°i:** ${card.type === 'major' ? 'Major Arcana' : 'Minor Arcana'}\n**√ù nghƒ©a xu√¥i:** ${card.meaning.upright}`,
            inline: false
        });
    });
    
    embed.setFooter({ 
        text: 'S·∫µn s√†ng lu·∫≠n b√†i? Nh·∫•n n√∫t "Lu·∫≠n b√†i v·ªõi ChatGPT" b√™n d∆∞·ªõi!' 
    });
    
    return embed;
}

/**
 * T·∫°o modal ƒë·ªÉ nh·∫≠p c√¢u h·ªèi t√πy ch·ªânh
 * @returns {Object} Modal component
 */
function createQuestionModal() {
    const { ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
    
    const modal = new ModalBuilder()
        .setCustomId('custom_question_modal')
        .setTitle('ƒê·∫∑t C√¢u H·ªèi Cho L√° B√†i');
    
    const questionInput = new TextInputBuilder()
        .setCustomId('question_input')
        .setLabel('C√¢u h·ªèi c·ªßa b·∫°n:')
        .setStyle(TextInputStyle.Paragraph)
        .setPlaceholder('V√≠ d·ª•: T√¨nh y√™u c·ªßa t√¥i s·∫Ω nh∆∞ th·∫ø n√†o trong th·ªùi gian t·ªõi?')
        .setRequired(true)
        .setMaxLength(500);
    
    const firstActionRow = new ActionRowBuilder().addComponents(questionInput);
    modal.addComponents(firstActionRow);
    
    return modal;
}

module.exports = {
    createCardListEmbed,
    createCardTypeSelector,
    createCardSelector,
    createPaginationButtons,
    createActionButtons,
    createSelectedCardsEmbed,
    createQuestionModal
};