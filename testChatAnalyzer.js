// Test Chat Analyzer v·ªõi prompt t√πy ch·ªânh v√† th√¥ng b√°o
require('dotenv').config();
const { getDatabase } = require('./database');
const { 
    startChatAnalysisScheduler, 
    getChatAnalyzerStats,
    CHAT_ANALYZER_CONFIG,
    IMPORTANCE_LEVELS
} = require('./chatAnalyzer');

// Mock Discord client
const mockClient = {
    users: {
        fetch: async (userId) => ({
            username: `User${userId}`,
            send: async (message) => console.log(`üì§ Mock send to ${userId}:`, message)
        })
    },
    channels: {
        fetch: async (channelId) => ({
            name: 'Test Channel',
            send: async (message) => console.log(`üì§ Mock send to channel:`, message),
            messages: {
                fetch: async (messageId) => ({
                    reply: async (message) => console.log(`üì§ Mock reply:`, message)
                })
            }
        })
    }
};

// Mock Discord message
const createMockMessage = (content, authorName = 'testuser', messageId = '123') => ({
    id: messageId,
    author: {
        id: '123456789',
        username: authorName,
        bot: false
    },
    content: content,
    channelId: process.env.TARGET_CHANNEL_ID,
    createdAt: new Date()
});

// Test function ƒë·ªÉ ki·ªÉm tra logic ph√¢n t√≠ch
async function testChatAnalysis() {
    console.log('üß™ B·∫Øt ƒë·∫ßu test Chat Analyzer...\n');

    // Test case 1: Ch√∫c ng·ªß ngon (n√™n l√† LOW)
    const testCase1 = [
        {
            messageId: 'test1',
            authorId: 'user1',
            authorName: 'TestUser1',
            content: 'Chuc ban ngu ngon',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 1: "Chuc ban ngu ngon"');
    console.log('Expected: LOW (ch√∫c ng·ªß ngon th√¢n thi·ªán)');
    
    try {
        // Import function tr·ª±c ti·∫øp t·ª´ file
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result1 = await analyzeMessagesWithGPT(testCase1);
        console.log(`Result: ${result1.importance.toUpperCase()} - ${result1.summary}`);
        console.log(`‚úÖ ${result1.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 2: X√∫c ph·∫°m v·ªõi t·ª´ "ngu" (n√™n l√† HIGH)
    const testCase2 = [
        {
            messageId: 'test2',
            authorId: 'user2',
            authorName: 'TestUser2',
            content: 'M√†y ngu qu√°',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 2: "M√†y ngu qu√°"');
    console.log('Expected: HIGH (x√∫c ph·∫°m)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result2 = await analyzeMessagesWithGPT(testCase2);
        console.log(`Result: ${result2.importance.toUpperCase()} - ${result2.summary}`);
        console.log(`‚úÖ ${result2.importance === IMPORTANCE_LEVELS.HIGH ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 3: Ch√∫c ng·ªß ngon v·ªõi d·∫•u ƒë·∫ßy ƒë·ªß (n√™n l√† LOW)
    const testCase3 = [
        {
            messageId: 'test3',
            authorId: 'user3',
            authorName: 'TestUser3',
            content: 'Ch√∫c b·∫°n ng·ªß ngon',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 3: "Ch√∫c b·∫°n ng·ªß ngon"');
    console.log('Expected: LOW (ch√∫c ng·ªß ngon th√¢n thi·ªán)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result3 = await analyzeMessagesWithGPT(testCase3);
        console.log(`Result: ${result3.importance.toUpperCase()} - ${result3.summary}`);
        console.log(`‚úÖ ${result3.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 4: Ch√∫c b√© ng·ªß ngon (n√™n l√† LOW)
    const testCase4 = [
        {
            messageId: 'test4',
            authorId: 'user4',
            authorName: 'TestUser4',
            content: 'ch√∫c b√© ngu ngon',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 4: "ch√∫c b√© ngu ngon"');
    console.log('Expected: LOW (ch√∫c ng·ªß ngon th√¢n thi·ªán)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result4 = await analyzeMessagesWithGPT(testCase4);
        console.log(`Result: ${result4.importance.toUpperCase()} - ${result4.summary}`);
        console.log(`‚úÖ ${result4.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 5: Nh·∫°c n√†y tr·∫Øng v·ªõi ƒë·∫πp qu√° (n√™n l√† LOW - m√¥ t·∫£ nh·∫°c, kh√¥ng ph·∫£i ng∆∞·ªùi)
    const testCase5 = [
        {
            messageId: 'test5',
            authorId: 'user5',
            authorName: 'TestUser5',
            content: 'nh·∫°c n√†y tr·∫Øng v·ªõi ƒë·∫πp qu√°',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 5: "nh·∫°c n√†y tr·∫Øng v·ªõi ƒë·∫πp qu√°"');
    console.log('Expected: LOW (m√¥ t·∫£ nh·∫°c, kh√¥ng ph·∫£i ng∆∞·ªùi)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result5 = await analyzeMessagesWithGPT(testCase5);
        console.log(`Result: ${result5.importance.toUpperCase()} - ${result5.summary}`);
        console.log(`‚úÖ ${result5.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 6: √Åo n√†y ƒëen qu√° (n√™n l√† LOW - m√¥ t·∫£ √°o, kh√¥ng ph·∫£i ng∆∞·ªùi)
    const testCase6 = [
        {
            messageId: 'test6',
            authorId: 'user6',
            authorName: 'TestUser6',
            content: '√°o n√†y ƒëen qu√°',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 6: "√°o n√†y ƒëen qu√°"');
    console.log('Expected: LOW (m√¥ t·∫£ √°o, kh√¥ng ph·∫£i ng∆∞·ªùi)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result6 = await analyzeMessagesWithGPT(testCase6);
        console.log(`Result: ${result6.importance.toUpperCase()} - ${result6.summary}`);
        console.log(`‚úÖ ${result6.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 7: Nam b√©o (n√™n l√† HIGH - g·ªçi t√™n + ch·∫ø gi·ªÖu ngo·∫°i h√¨nh)
    const testCase7 = [
        {
            messageId: 'test7',
            authorId: 'user7',
            authorName: 'TestUser7',
            content: 'nam b√©o',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 7: "nam b√©o"');
    console.log('Expected: HIGH (g·ªçi t√™n + ch·∫ø gi·ªÖu ngo·∫°i h√¨nh)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result7 = await analyzeMessagesWithGPT(testCase7);
        console.log(`Result: ${result7.importance.toUpperCase()} - ${result7.summary}`);
        console.log(`‚úÖ ${result7.importance === IMPORTANCE_LEVELS.HIGH ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 8: Emoji message (n√™n l√† LOW - ch·ªâ emoji, kh√¥ng c√≥ n·ªôi dung text)
    const testCase8 = [
        {
            messageId: 'test8',
            authorId: 'user8',
            authorName: 'TestUser8',
            content: ':AniNhi~17:',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 8: ":AniNhi~17:" (emoji)');
    console.log('Expected: LOW (ch·ªâ emoji, kh√¥ng c√≥ n·ªôi dung text c·∫ßn ki·ªÉm duy·ªát)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result8 = await analyzeMessagesWithGPT(testCase8);
        console.log(`Result: ${result8.importance.toUpperCase()} - ${result8.summary}`);
        console.log(`‚úÖ ${result8.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    // Test case 9: Emoji v·ªõi text (n√™n l√† LOW - emoji + text b√¨nh th∆∞·ªùng)
    const testCase9 = [
        {
            messageId: 'test9',
            authorId: 'user9',
            authorName: 'TestUser9',
            content: 'üëç Hello',
            createdAt: new Date()
        }
    ];

    console.log('üìù Test Case 9: "üëç Hello" (emoji + text)');
    console.log('Expected: LOW (emoji + text b√¨nh th∆∞·ªùng)');
    
    try {
        const { analyzeMessagesWithGPT } = require('./chatAnalyzer');
        const result9 = await analyzeMessagesWithGPT(testCase9);
        console.log(`Result: ${result9.importance.toUpperCase()} - ${result9.summary}`);
        console.log(`‚úÖ ${result9.importance === IMPORTANCE_LEVELS.LOW ? 'PASS' : 'FAIL'}\n`);
    } catch (error) {
        console.log(`‚ùå Error: ${error.message}\n`);
    }

    console.log('üèÅ K·∫øt th√∫c test');
}

// Test function ch√≠nh
async function testChatAnalyzer() {
    console.log('üöÄ B·∫Øt ƒë·∫ßu test Chat Analyzer...\n');

    try {
        // K·∫øt n·ªëi database
        const db = getDatabase();
        console.log('‚úÖ Database connected');

        // Test c·∫•u h√¨nh
        console.log('‚öôÔ∏è Test c·∫•u h√¨nh...');
        console.log(`ENABLED: ${CHAT_ANALYZER_CONFIG.ENABLED}`);
        console.log(`TARGET_CHANNEL_ID: ${CHAT_ANALYZER_CONFIG.TARGET_CHANNEL_ID}`);
        console.log(`ANALYSIS_INTERVAL: ${CHAT_ANALYZER_CONFIG.ANALYSIS_INTERVAL}ms`);
        console.log(`BATCH_SIZE: ${CHAT_ANALYZER_CONFIG.BATCH_SIZE}`);
        console.log('‚úÖ C·∫•u h√¨nh OK\n');

        // Test l∆∞u tin nh·∫Øn
        console.log('üìù Test l∆∞u tin nh·∫Øn...');
        const testMessages = [
            createMockMessage('Ch√∫ng ta c·∫ßn th·∫£o lu·∫≠n v·ªÅ d·ª± √°n m·ªõi', 'user1', 'msg1'),
            createMockMessage('T√¥i ƒë·ªìng √Ω, ƒë√¢y l√† quy·∫øt ƒë·ªãnh quan tr·ªçng', 'user2', 'msg2'),
            createMockMessage('D·ª± √°n n√†y s·∫Ω thay ƒë·ªïi ho√†n to√†n c√°ch ch√∫ng ta l√†m vi·ªác', 'user3', 'msg3'),
            createMockMessage('Ch√†o m·ªçi ng∆∞·ªùi', 'user4', 'msg4'),
            createMockMessage('üëç', 'user5', 'msg5')
        ];
        
        for (const message of testMessages) {
            // Assuming saveMessageToDatabase is available from chatAnalyzer or imported elsewhere
            // For now, we'll just log the message
            console.log(`üìù L∆∞u tin nh·∫Øn:`, message.content);
        }
        
        // Test ph√¢n t√≠ch
        console.log('üîç Test ph√¢n t√≠ch chat...');
        startChatAnalysisScheduler(db, mockClient);
        
        console.log('‚úÖ Test ho√†n th√†nh');
    } catch (error) {
        console.error('‚ùå L·ªói test:', error);
    }
}

// Ch·∫°y test n·∫øu file ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
    testChatAnalyzer();
    testChatAnalysis().catch(console.error);
}

module.exports = { testChatAnalyzer, testChatAnalysis }; 